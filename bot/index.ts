// bot/index.ts
import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import { Telegraf, Markup } from 'telegraf';
import type { Context } from 'telegraf';

// ========== ENV ==========
const BOT_TOKEN = process.env.BOT_TOKEN!;
if (!BOT_TOKEN) throw new Error('BOT_TOKEN is missing');

const LANDING_URL = process.env.LANDING_URL || 'https://angela-landing-clean.vercel.app';
const BUTTONS_PER_ROW = Math.max(1, Number(process.env.BUTTONS_PER_ROW || 1));
const BUTTON_LABEL_LIMIT = Math.max(10, Number(process.env.BUTTON_LABEL_LIMIT || 28));

// ========== BOT ==========
const bot = new Telegraf(BOT_TOKEN);

// ========== DATA SOURCES (—Ä–∞–±–æ—Ç–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ bot/) ==========
const coursesPath = path.join(process.cwd(), 'data', 'courses.json');
const invoicesPath = path.join(process.cwd(), 'invoice-links.json');

type Course = {
  id: string;
  title: string;
  desc?: string;
  rub?: number;
  short?: string;
  label?: string;
};

function readJSON<T>(p: string): T {
  return JSON.parse(fs.readFileSync(p, 'utf8')) as T;
}
function loadCourses(): Course[] { return readJSON<Course[]>(coursesPath); }
function loadInvoices(): Record<string, string> { return readJSON<Record<string,string>>(invoicesPath); }

// –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –ø–æ—Ä—è–¥–æ–∫ ‚Äî —á—Ç–æ–±—ã –í–°–ï–ì–î–ê –±—ã–ª–æ 5/5
const TAROT_IDS = [
  'tarot-basic',
  'pro-interpretation',
  'love-money-spreads',
  'tarot-for-brands',
  'master-diagnostics',
] as const;

const ASTRO_IDS = [
  'astro-basic',
  'astro-profi',
  'astro-synastry',
  'astro-prognostics',
  'astro-blog-business',
] as const;

// ========== UTILS ==========
function chunk<T>(arr: T[], size: number): T[][] {
  const out: T[][] = [];
  for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));
  return out;
}
function clipLabel(s: string) {
  const t = (s || '').trim();
  return t.length > BUTTON_LABEL_LIMIT ? t.slice(0, BUTTON_LABEL_LIMIT - 1) + '‚Ä¶' : t;
}
function labelOf(c?: Course) {
  if (!c) return '‚Äî';
  return clipLabel(c.label || c.short || c.title);
}

// ========== KEYBOARDS ==========
// –ö–æ—Ä–µ–Ω—å: –≤—Å–µ–≥–¥–∞ 3 –∫–Ω–æ–ø–∫–∏
function rootKeyboard() {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback('üîÆ –¢–∞—Ä–æ', 'menu:tarot'),
      Markup.button.callback('üåå –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è', 'menu:astro'),
    ],
    [Markup.button.url('‚ú® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã', LANDING_URL)],
  ]);
}

// –ü–æ–¥–º–µ–Ω—é –∏–∑ 5 –∏–Ω–≤–æ–π—Å–æ–≤ + –Ω–∞–∑–∞–¥ + –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ¬´–ü—Ä–æ–≥—Ä–∞–º–º—ã¬ª
function sectionKeyboard(section: 'tarot'|'astro') {
  const COURSES = loadCourses();
  const INVOICES = loadInvoices();

  const order = section === 'tarot' ? TAROT_IDS : ASTRO_IDS;
  const byId: Record<string, Course> = Object.fromEntries(COURSES.map(c => [c.id, c]));

  const btns = order.map(id => {
    const c = byId[id];
    const url = INVOICES[id];
    const text = labelOf(c);
    return url ? Markup.button.url(text, url) : Markup.button.callback(`‚õî ${text}`, 'noop');
  });

  const rows = chunk(btns, BUTTONS_PER_ROW);
  rows.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'menu:root')]);
  rows.push([Markup.button.url('‚ú® –ü—Ä–æ–≥—Ä–∞–º–º—ã', LANDING_URL)]);

  return Markup.inlineKeyboard(rows);
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É –≠–¢–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è
async function editHere(ctx: any, kb: ReturnType<typeof rootKeyboard>) {
  try {
    await ctx.editMessageReplyMarkup(kb.reply_markup);
  } catch (e: any) {
    const d = String(e?.description || e?.message || '');
    if (!d.includes('message is not modified')) {
      console.error('[editHere] error:', d);
    }
  }
}

// ========== MENU HANDLERS ==========
bot.action('menu:root', async (ctx) => {
  await ctx.answerCbQuery().catch(()=>{});
  await editHere(ctx, rootKeyboard());
});
bot.action('menu:tarot', async (ctx) => {
  await ctx.answerCbQuery('–¢–∞—Ä–æ').catch(()=>{});
  await editHere(ctx, sectionKeyboard('tarot'));
});
bot.action('menu:astro', async (ctx) => {
  await ctx.answerCbQuery('–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è').catch(()=>{});
  await editHere(ctx, sectionKeyboard('astro'));
});
bot.action('noop', async (ctx) => {
  await ctx.answerCbQuery('–ò–Ω–≤–æ–π—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–Ω–æ–≤–æ.', { show_alert: true }).catch(()=>{});
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ JSON –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
bot.command('reload', async (ctx) => {
  // –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Å–∫–∞–∂–µ–º –û–ö; —Å–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–∞–∫ —á–∏—Ç–∞—é—Ç ¬´–Ω–∞ –ª–µ—Ç—É¬ª
  try {
    loadCourses(); loadInvoices();
    await ctx.reply('–§–∞–π–ª—ã –ø–æ–¥—Ö–≤–∞—á–µ–Ω—ã ‚úîÔ∏è', rootKeyboard());
  } catch (e) {
    await ctx.reply('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.');
  }
});

// ========== –ú–ê–°–¢–ï–† –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ß–ï–†–ï–ó /start ==========
type Draft = {
  step: 'channel'|'text'|'media'|'preview';
  channel?: string; // @username –∏–ª–∏ -100...
  textMsg?: { chat_id: number; message_id: number; text?: string; entities?: any[] };
  mediaMsg?: { chat_id: number; message_id: number };
};
const STATE = new Map<number, Draft>();

function normalizeChatId(v: string) {
  const t = v.trim();
  if (/^-?\d+$/.test(t)) return t;
  return t.startsWith('@') ? t : `@${t}`;
}

bot.start(async (ctx) => {
  STATE.set(ctx.from.id, { step: 'channel' });
  await ctx.reply('–û–∫, —Å–¥–µ–ª–∞–µ–º –ø–æ—Å—Ç —Å –º–µ–Ω—é.\n\n1) –í –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª –ø—É–±–ª–∏–∫—É–µ–º? –ü—Ä–∏—à–ª–∏ @username –∏–ª–∏ -100‚Ä¶');
});
bot.command('cancel', async (ctx) => {
  STATE.delete(ctx.from.id);
  await ctx.reply('–°–±—Ä–æ—Å–∏–ª. –ù–∞–±–µ—Ä–∏ /start –∑–∞–Ω–æ–≤–æ.');
});

// —à–∞–≥ 1 ‚Äî –∫–∞–Ω–∞–ª
bot.hears(/^(@[A-Za-z0-9_]{4,}|-100[0-9]+)/, async (ctx, next) => {
  const d = STATE.get(ctx.from.id);
  if (!d || d.step !== 'channel') return next();
  d.channel = normalizeChatId((ctx.message as any).text);
  d.step = 'text';
  await ctx.reply(`–ö–∞–Ω–∞–ª: <b>${d.channel}</b>\n\n2) –ü—Ä–∏—à–ª–∏ <b>—Ç–µ–∫—Å—Ç</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∂–∏—Ä–Ω—ã–π/–∫—É—Ä—Å–∏–≤/—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è).`, { parse_mode: 'HTML' });
});

// —à–∞–≥ 2 ‚Äî —Ç–µ–∫—Å—Ç
bot.on('text', async (ctx, next) => {
  const d = STATE.get(ctx.from.id);
  if (!d || d.step !== 'text') return next();

  d.textMsg = {
    chat_id: ctx.chat!.id,
    message_id: ctx.message!.message_id,
    text: (ctx.message as any).text,
    entities: (ctx.message as any).entities || [],
  };
  d.step = 'media';
  await ctx.reply('3) –ü—Ä–∏—à–ª–∏ <b>–º–µ–¥–∏–∞</b> (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ/–≥–æ–ª–æ—Å) –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª.', { parse_mode: 'HTML' });
});

// —à–∞–≥ 3 ‚Äî –º–µ–¥–∏–∞ / –Ω–µ—Ç
bot.hears(/^–Ω–µ—Ç$/i, async (ctx) => {
  const d = STATE.get(ctx.from.id);
  if (!d || d.step !== 'media' || !d.channel) return;
  d.step = 'preview';
  await showPreview(ctx, d);
});
bot.on(['photo','video','animation','voice','document'], async (ctx, next) => {
  const d = STATE.get(ctx.from.id);
  if (!d || d.step !== 'media' || !d.channel) return next();

  d.mediaMsg = { chat_id: ctx.chat!.id, message_id: (ctx.message as any).message_id };
  d.step = 'preview';
  await showPreview(ctx, d);
});

async function showPreview(ctx: Context, d: Draft) {
  await ctx.reply(
    `–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤.\n–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>${d.channel}</b>`,
    {
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [ Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'post:publish') ],
        [ Markup.button.callback('‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å', 'post:reset') ],
      ])
    }
  );

  try {
    if (d.mediaMsg) {
      await ctx.telegram.copyMessage(
        ctx.chat!.id,
        d.mediaMsg.chat_id,
        d.mediaMsg.message_id,
        d.textMsg
          ? { caption: d.textMsg.text, caption_entities: d.textMsg.entities, reply_markup: rootKeyboard().reply_markup }
          : { reply_markup: rootKeyboard().reply_markup }
      );
    } else if (d.textMsg) {
      await ctx.telegram.copyMessage(
        ctx.chat!.id,
        d.textMsg.chat_id,
        d.textMsg.message_id,
        { reply_markup: rootKeyboard().reply_markup }
      );
    }
  } catch (e) {
    console.error('[preview.copyMessage] error:', e);
  }
}

bot.action('post:reset', async (ctx) => {
  STATE.delete(ctx.from.id);
  await ctx.editMessageText('–°–±—Ä–æ—Å–∏–ª. –ù–∞–±–µ—Ä–∏ /start –∑–∞–Ω–æ–≤–æ.');
});

bot.action('post:publish', async (ctx) => {
  const d = STATE.get(ctx.from.id);
  if (!d?.channel) {
    await ctx.answerCbQuery('–ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', { show_alert: true }).catch(()=>{});
    return;
  }
  await ctx.answerCbQuery().catch(()=>{});

  try {
    let res: any;
    if (d.mediaMsg) {
      res = await ctx.telegram.copyMessage(
        d.channel, d.mediaMsg.chat_id, d.mediaMsg.message_id,
        d.textMsg
          ? { caption: d.textMsg.text, caption_entities: d.textMsg.entities, reply_markup: rootKeyboard().reply_markup }
          : { reply_markup: rootKeyboard().reply_markup }
      );
    } else if (d.textMsg) {
      res = await ctx.telegram.copyMessage(
        d.channel, d.textMsg.chat_id, d.textMsg.message_id,
        { reply_markup: rootKeyboard().reply_markup }
      );
    } else {
      await ctx.reply('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.');
      return;
    }

    // —Å–æ—Ö—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    try {
      let url = '';
      const ch = d.channel;
      if (typeof ch === 'string' && ch.startsWith('@')) url = `https://t.me/${ch.slice(1)}/${res.message_id}`;
      else if (/^-?100\d+$/.test(String(ch))) url = `https://t.me/c/${String(ch).replace('-100','')}/${res.message_id}`;
      fs.writeFileSync(path.join(process.cwd(), 'menu-post.json'), JSON.stringify({ url, chat_id: d.channel, message_id: res.message_id }, null, 2), 'utf8');
    } catch {}

    await ctx.editMessageText(`–ì–æ—Ç–æ–≤–æ ‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ <b>${d.channel}</b>. –ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ.`, { parse_mode: 'HTML' });
    STATE.delete(ctx.from.id);
  } catch (e: any) {
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${e?.description || e?.message || e}`);
  }
});

// ========== RUN ==========
bot.launch().then(()=>console.log('[boot] bot started'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
