"use client";

import { useEffect, useState } from "react";
import { X } from "lucide-react";

type Props = {
  open: boolean;
  onClose: () => void;
  amount: number;    // сюда прилетает цена курса
  title: string;     // сюда прилетает название курса
};

const formatPrice = (n: number) =>
  new Intl.NumberFormat("ru-RU", { style: "currency", currency: "RUB", maximumFractionDigits: 0 }).format(n);

export default function PaymentDialog({ open, onClose, amount, title }: Props) {
  const [card, setCard] = useState("");
  const [exp, setExp] = useState("");
  const [cvc, setCvc] = useState("");
  const [name, setName] = useState("");
  const [done, setDone] = useState<null | "ok">(null);

  // блокируем скролл под модалкой
  useEffect(() => {
    if (!open) return;
    const prev = document.body.style.overflow;
    document.body.style.overflow = "hidden";
    return () => { document.body.style.overflow = prev; };
  }, [open]);

  // закрытие по ESC
  useEffect(() => {
    if (!open) return;
    const onKey = (e: KeyboardEvent) => { if (e.key === "Escape") onClose(); };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [open, onClose]);

  if (!open) return null;

  const canPay = card.replace(/\s/g, "").length >= 12 && exp.length >= 4 && cvc.length >= 3 && name.trim().length >= 2;

  function handlePay(e: React.FormEvent) {
    e.preventDefault();
    // ДЕМО-ОПЛАТА: ничего никуда не отправляем, просто показываем успешно
    setDone("ok");
    // при желании можно авто-закрыть через пару секунд:
    // setTimeout(onClose, 1500);
  }

  return (
    <div className="fixed inset-0 z-[999]">
      {/* фон */}
      <div
        className="absolute inset-0 bg-black/40 backdrop-blur-[2px]"
        onClick={onClose}
      />
      {/* окно */}
      <div className="absolute inset-0 flex items-center justify-center p-4">
        <div
          className="w-full max-w-[520px] rounded-2xl border border-[#eadfcf] bg-white/90 shadow-2xl backdrop-blur-md"
          style={{
            backgroundImage:
              "radial-gradient(1000px 300px at 10% -10%, rgba(232,220,198,0.45), transparent), radial-gradient(800px 300px at 110% 10%, rgba(233,226,212,0.5), transparent)",
          }}
        >
          <div className="flex items-center justify-between p-5 border-b border-[#eadfcf]">
            <div>
              <div className="text-sm text-[#6b5a43]">Оформление доступа</div>
              <div className="text-lg font-medium text-[#2f2619]">{title}</div>
            </div>
            <button
              onClick={onClose}
              className="h-9 w-9 rounded-xl bg-white/80 border border-[#eadfcf] flex items-center justify-center hover:bg-white"
              aria-label="Закрыть"
            >
              <X className="h-4 w-4 text-[#3c2f1e]" />
            </button>
          </div>

          <div className="p-5">
            {/* Сумма к оплате */}
            <div className="mb-4 rounded-xl border border-[#eadfcf] bg-white/70 p-4">
              <div className="text-[#6b5a43] text-sm">Сумма</div>
              <div className="text-2xl text-[#3c2f1e] font-semibold">{formatPrice(amount)}</div>
            </div>

            {/* Форма демо-карты */}
            {done !== "ok" ? (
              <form className="grid gap-3" onSubmit={handlePay}>
                <input
                  className="rounded-xl border border-[#e0d4bf] bg-white/80 px-3 py-3 text-[#3c2f1e] outline-none"
                  placeholder="Номер карты (демо)"
                  inputMode="numeric"
                  value={card}
                  onChange={(e) => setCard(e.target.value)}
                />
                <div className="grid grid-cols-2 gap-3">
                  <input
                    className="rounded-xl border border-[#e0d4bf] bg-white/80 px-3 py-3 text-[#3c2f1e] outline-none"
                    placeholder="MM/YY"
                    inputMode="numeric"
                    value={exp}
                    onChange={(e) => setExp(e.target.value)}
                  />
                  <input
                    className="rounded-xl border border-[#e0d4bf] bg-white/80 px-3 py-3 text-[#3c2f1e] outline-none"
                    placeholder="CVC"
                    inputMode="numeric"
                    value={cvc}
                    onChange={(e) => setCvc(e.target.value)}
                  />
                </div>
                <input
                  className="rounded-xl border border-[#e0d4bf] bg-white/80 px-3 py-3 text-[#3c2f1e] outline-none"
                  placeholder="Имя на карте"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                />
                <button
                  type="submit"
                  disabled={!canPay}
                  className="mt-1 rounded-xl px-5 py-4 text-base disabled:opacity-60"
                  style={{
                    background: "linear-gradient(180deg, #ead9b8 0%, #d7bd8f 40%, #bf965d 100%)",
                    color: "#2f271a",
                    boxShadow: "0 12px 28px rgba(191,150,93,0.35)",
                  }}
                >
                  Оплатить {formatPrice(amount)}
                </button>
                <div className="text-xs text-[#6b5a43]">
                  Демо-режим: данные карты никуда не отправляются и не сохраняются.
                </div>
              </form>
            ) : (
              <div className="rounded-xl border border-[#cfe8cf] bg-[#eaf7ea] p-4 text-[#1d4b1d]">
                Оплата в демо-режиме прошла успешно. Доступ скоро активируется.
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
